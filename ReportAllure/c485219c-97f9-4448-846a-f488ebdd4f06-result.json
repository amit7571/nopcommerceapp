{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 116.0.5845.96 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nStacktrace:\n0   chromedriver                        0x000000010affd6b8 chromedriver + 4937400\n1   chromedriver                        0x000000010aff4b73 chromedriver + 4901747\n2   chromedriver                        0x000000010abb2616 chromedriver + 435734\n3   chromedriver                        0x000000010abe4d10 chromedriver + 642320\n4   chromedriver                        0x000000010abe018a chromedriver + 622986\n5   chromedriver                        0x000000010abdc67c chromedriver + 607868\n6   chromedriver                        0x000000010ac23a08 chromedriver + 899592\n7   chromedriver                        0x000000010ac22ebf chromedriver + 896703\n8   chromedriver                        0x000000010ac19de3 chromedriver + 859619\n9   chromedriver                        0x000000010abe7d7f chromedriver + 654719\n10  chromedriver                        0x000000010abe90de chromedriver + 659678\n11  chromedriver                        0x000000010afb92ad chromedriver + 4657837\n12  chromedriver                        0x000000010afbe130 chromedriver + 4677936\n13  chromedriver                        0x000000010afc4def chromedriver + 4705775\n14  chromedriver                        0x000000010afbf05a chromedriver + 4681818\n15  chromedriver                        0x000000010af9192c chromedriver + 4495660\n16  chromedriver                        0x000000010afdc838 chromedriver + 4802616\n17  chromedriver                        0x000000010afdc9b7 chromedriver + 4802999\n18  chromedriver                        0x000000010afed99f chromedriver + 4872607\n19  libsystem_pthread.dylib             0x00007ff80d28d1d3 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff80d288bd3 thread_start + 15", "trace": "browser = 'chrome'\n\n    @pytest.fixture()\n    def setup(browser):\n        if browser == 'chrome':\n>           driver = webdriver.Chrome()\n\ntestCases/conftest.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:49: in __init__\n    super().__init__(\nvenv/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:54: in __init__\n    super().__init__(\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:206: in __init__\n    self.start_session(capabilities)\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:291: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f832ab55670>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...ff80d28d1d3 _pthread_start + 125\\\\n20  libsystem_pthread.dylib             0x00007ff80d288bd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nE       Current browser version is 116.0.5845.96 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nE       Stacktrace:\nE       0   chromedriver                        0x000000010affd6b8 chromedriver + 4937400\nE       1   chromedriver                        0x000000010aff4b73 chromedriver + 4901747\nE       2   chromedriver                        0x000000010abb2616 chromedriver + 435734\nE       3   chromedriver                        0x000000010abe4d10 chromedriver + 642320\nE       4   chromedriver                        0x000000010abe018a chromedriver + 622986\nE       5   chromedriver                        0x000000010abdc67c chromedriver + 607868\nE       6   chromedriver                        0x000000010ac23a08 chromedriver + 899592\nE       7   chromedriver                        0x000000010ac22ebf chromedriver + 896703\nE       8   chromedriver                        0x000000010ac19de3 chromedriver + 859619\nE       9   chromedriver                        0x000000010abe7d7f chromedriver + 654719\nE       10  chromedriver                        0x000000010abe90de chromedriver + 659678\nE       11  chromedriver                        0x000000010afb92ad chromedriver + 4657837\nE       12  chromedriver                        0x000000010afbe130 chromedriver + 4677936\nE       13  chromedriver                        0x000000010afc4def chromedriver + 4705775\nE       14  chromedriver                        0x000000010afbf05a chromedriver + 4681818\nE       15  chromedriver                        0x000000010af9192c chromedriver + 4495660\nE       16  chromedriver                        0x000000010afdc838 chromedriver + 4802616\nE       17  chromedriver                        0x000000010afdc9b7 chromedriver + 4802999\nE       18  chromedriver                        0x000000010afed99f chromedriver + 4872607\nE       19  libsystem_pthread.dylib             0x00007ff80d28d1d3 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff80d288bd3 thread_start + 15\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:245: SessionNotCreatedException"}, "start": 1692363033016, "stop": 1692363033016, "uuid": "c5e300bf-e7e7-4f7d-8c70-65a79583a89c", "historyId": "6077c220bd96aaae36062a3875e7b04f", "testCaseId": "6077c220bd96aaae36062a3875e7b04f", "fullName": "test_login.Test_001_Login#test_login", "labels": [{"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_001_Login"}, {"name": "host", "value": "bijaks-MacBook-Pro.local"}, {"name": "thread", "value": "45827-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}